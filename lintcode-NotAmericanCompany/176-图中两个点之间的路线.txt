/**
 * Definition for Directed graph.
 * struct DirectedGraphNode {
 *     int label;
 *     vector<DirectedGraphNode *> neighbors;
 *     DirectedGraphNode(int x) : label(x) {};
 * };
 */
class Solution {
public:
    /**
     * @param graph: A list of Directed graph node
     * @param s: the starting Directed graph node
     * @param t: the terminal Directed graph node
     * @return: a boolean value
     */
    vector<int>marked;
    bool hasRoute(vector<DirectedGraphNode*> graph,
                  DirectedGraphNode* s, DirectedGraphNode* t) {
        int size = graph.size();
        marked.resize(size);
        dfs(graph,s->label);
        if(marked[t->label]){
            return true;
        }
        return false;
    }
    
    
    void dfs(vector<DirectedGraphNode*> graph,int s){
        marked[s]=1;
        vector<DirectedGraphNode*>vec=graph[s]->neighbors;
        for(int i=0;i<vec.size();i++){
            int v=vec[i]->label;
            if(marked[v]==0){
                dfs(graph,v);
            }
        }
    }
    
    
};

