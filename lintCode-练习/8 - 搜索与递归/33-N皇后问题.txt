class Solution {
public:
    /**
     * Get all distinct N-Queen solutions
     * @param n: The number of queens
     * @return: All distinct solutions
     * For example, A string '...Q' shows a queen on forth position
     */
    vector<vector<int> >box;
    vector<vector<string> >res;
    vector<vector<string> > solveNQueens(int n) {
            vector<int>vec(n);
            for(int i=0;i<n;i++){
                box.push_back(vec);
            }
            f(0,n);
            return res;
    }
    
    void f(int index,int n){
        if(index==n){
            vector<string>vec = generateQueue(n);
            res.push_back(vec);
            return;
        }
        for(int j=0;j<n;j++){
            if(check(index,j,n)){
                box[index][j]=1;
                f(index+1,n);
                box[index][j]=0;
            }
        }
    }
    
    vector<string> generateQueue(int n){
        vector<string>vec;
        for(int i=0;i<n;i++){
               string res = "";
               for(int j=0;j<n;j++){
                   if(box[i][j]==1){
                       res=res+"Q";
                   }else{
                       res=res+".";
                   }
               }
        vec.push_back(res);
        }
        return vec;
    }
    
    
    bool check(int i,int j,int n){
        for(int x=0;x<n;x++){
            if(box[x][j]==1 || box[i][x]==1){
                return false;
            }
            int y1 = x+i-j;
            if(y1>=0 && y1<n && box[y1][x]==1){
                return false;
            }
            int y2 = i+j-x;
            if(y2>=0 && y2<n && box[y2][x]==1){
                return false;
            }
        }
        return true;
    }
    
};
